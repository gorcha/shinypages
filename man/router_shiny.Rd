% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{router_shiny}
\alias{router_shiny}
\alias{router_ui}
\alias{router_server}
\title{Router server and UI}
\usage{
router_ui(id = "__router__")

router_server(router, input, output, session, id = "__router__")
}
\arguments{
\item{id}{Router id.}

\item{router}{A shinypages \code{router()} object.}

\item{input}{Shiny server \code{input} object.}

\item{output}{Shiny server \code{output} object.}

\item{session}{Shiny server \code{session} object.}
}
\value{
\code{router_server()} returns a Shiny observer reference class object.
See \code{\link[shiny:observe]{shiny::observe()}} for details.

\code{router_ui()} returns an HTML output element.
}
\description{
The \code{router_server()} and \code{router_ui()} functions are used to render page
modules served by a \verb{[router()]} into a Shiny application.

The content for the current page will be rendered in place of \code{router_ui()}.
This can appear anywhere inside the UI definition, so that common UI elements
like \code{head()} tags don't need to be repeated in each page module.

\code{router_server()} can be called from anywhere inside the \code{server()} function
of the Shiny application.
}
\examples{
if (interactive()) {

ui_test <- function(id) {
  htmltools::div(
    htmltools::p("Test!"),
    htmltools::p(htmltools::a(href = router_link("/"), "Home"))
  )
}

test_router <- router(router_page("home", ui_test))

ui <- shiny::fluidPage(
  router_ui()
)

server <- function(input, output, session) {
  router_server(test_router, input, output, session)
}

shiny::shinyApp(ui, server)
}
}
\seealso{
\code{\link[=router]{router()}}
}
