[{"path":"https://gorcha.github.io/shinypages/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 shinypages authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gorcha.github.io/shinypages/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danny Smith. Author, maintainer.","code":""},{"path":"https://gorcha.github.io/shinypages/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2022). shinypages: Multi-page Shiny Applications. https://github.com/gorcha/shinypages, https://gorcha.github.io/shinypages/.","code":"@Manual{,   title = {shinypages: Multi-page Shiny Applications},   author = {Danny Smith},   year = {2022},   note = {https://github.com/gorcha/shinypages, https://gorcha.github.io/shinypages/}, }"},{"path":"https://gorcha.github.io/shinypages/index.html","id":"shinypages","dir":"","previous_headings":"","what":"Multi-page Shiny Applications","title":"Multi-page Shiny Applications","text":"shinypages simple multi-page router Shiny applications, much inspired Appsilon’s shiny.router.","code":""},{"path":"https://gorcha.github.io/shinypages/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multi-page Shiny Applications","text":"can install development version shinypages like :","code":"# install.packages(\"devtools\") devtools::install_github(\"gorcha/shinypages\")"},{"path":"https://gorcha.github.io/shinypages/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Multi-page Shiny Applications","text":"","code":"library(shiny) library(shinypages)  # Create a simple page with only UI ui_home <- function(id) {   tagList(     h2(\"Hello world!\"),     p(a(href = router_link(\"cars\"), \"Cars\")),     p(a(href = router_link(\"admin\"), \"Admin\"))   ) }  home_page <- router_page(\"home\", ui_home)   # Create a page with UI and a module server ui_cars <- function(id) {   ns <- NS(id)   tagList(     h2(\"Cars\"),     p(a(href = router_link(\"home\"), \"Home\")),     tableOutput(ns(\"cars\"))   ) }  server_cars <- function(id) {   moduleServer(id, function(input, output, session) {     output$cars <- renderTable(mtcars)   }) }  cars_page <- router_page(\"cars\", ui_cars, server_cars)  # Restrict access to a page is_admin <- function(session) {   \"admin\" %in% session$groups }  ui_admin <- function(id) {   tagList(     h2(\"Top Secret\"),     p(a(href = router_link(\"home\"), \"Home\"))   ) }  admin_page <- router_page(\"admin\", ui_admin, authorised = is_admin)  # Create a router my_router <- router(home_page, cars_page, admin_page)  # Add your router into a Shiny application ui <- fixedPage(   router_ui() )  server <- function(input, output, session) {   router_server(my_router, input, output, session) }  shinyApp(ui, server)"},{"path":"https://gorcha.github.io/shinypages/reference/add_router_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a router callback function — add_router_callback","title":"Set a router callback function — add_router_callback","text":"Set router callback function","code":""},{"path":"https://gorcha.github.io/shinypages/reference/add_router_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a router callback function — add_router_callback","text":"","code":"add_router_callback(router, callback = c(\"pageload\", \"default\"), func)"},{"path":"https://gorcha.github.io/shinypages/reference/add_router_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a router callback function — add_router_callback","text":"router router object. callback name callback set. Currently \"pageload\" \"default\" callbacks supported. func callback function. function take router_page object shiny session input.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/add_router_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a router callback function — add_router_callback","text":"Invisibly returns input router object.","code":""},{"path":[]},{"path":"https://gorcha.github.io/shinypages/reference/change_router_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Change router page — change_router_page","title":"Change router page — change_router_page","text":"Change router page","code":""},{"path":"https://gorcha.github.io/shinypages/reference/change_router_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change router page — change_router_page","text":"","code":"change_router_page(   path,   mode = \"push\",   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://gorcha.github.io/shinypages/reference/change_router_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change router page — change_router_page","text":"path Path destination page. mode Argument passed shiny::updateQueryString(). session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/change_router_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change router page — change_router_page","text":"","code":"if (FALSE) { change_router_page(\"home\") }"},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current router_page object — get_router_page","title":"Get the current router_page object — get_router_page","text":"Get current router_page object","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current router_page object — get_router_page","text":"","code":"get_router_page(session = shiny::getDefaultReactiveDomain())"},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the current router_page object — get_router_page","text":"session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current router_page object — get_router_page","text":"current router_page() object.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the current router_page object — get_router_page","text":"","code":"if (FALSE) { get_router_page() }"},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the title of the current router page — get_router_page_title","title":"Get the title of the current router page — get_router_page_title","text":"Get title current router page","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the title of the current router page — get_router_page_title","text":"","code":"get_router_page_title(session = shiny::getDefaultReactiveDomain())"},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the title of the current router page — get_router_page_title","text":"session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the title of the current router page — get_router_page_title","text":"title current router_page().","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_page_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the title of the current router page — get_router_page_title","text":"","code":"if (FALSE) { get_router_page_title() }"},{"path":"https://gorcha.github.io/shinypages/reference/get_router_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current router path from the URL — get_router_path","title":"Get the current router path from the URL — get_router_path","text":"Get current router path URL","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current router path from the URL — get_router_path","text":"","code":"get_router_path(session = shiny::getDefaultReactiveDomain())"},{"path":"https://gorcha.github.io/shinypages/reference/get_router_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the current router path from the URL — get_router_path","text":"session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current router path from the URL — get_router_path","text":"current router path.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/get_router_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the current router path from the URL — get_router_path","text":"","code":"if (FALSE) { get_router_path() }"},{"path":"https://gorcha.github.io/shinypages/reference/router.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a router — router","title":"Create a router — router","text":"Create router","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a router — router","text":"","code":"router(   ...,   callback_pageload = NULL,   callback_default = NULL,   page_403 = router_page(\"403\", ui_403),   page_404 = router_page(\"404\", ui_404) )"},{"path":"https://gorcha.github.io/shinypages/reference/router.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a router — router","text":"... set router_page() objects. first page considered default, used path provided. callback_pageload function called immediately page rendered. function take router_page object shiny session input. callback_default function determines default page. function take shiny session input return path default page. provided, first page used default. page_403 router_page used user attempts access unauthorised page. page_404 router_page used user attempts access page exist.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a router — router","text":"router object.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a router — router","text":"","code":"if (interactive()) {  ui_test <- function(id) {   htmltools::p(\"Test!\") }  home_page <- router_page(\"home\", ui_test) other_page - router_page(\"other\", ui_test)  test_router <- router(home_page, other_page) }"},{"path":"https://gorcha.github.io/shinypages/reference/router_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a page link — router_link","title":"Create a page link — router_link","text":"Take path page convert link use Shiny UI.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a page link — router_link","text":"","code":"router_link(path)"},{"path":"https://gorcha.github.io/shinypages/reference/router_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a page link — router_link","text":"path Path destination page.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a page link — router_link","text":"link destination page.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a page link — router_link","text":"","code":"htmltools::a(href = router_link(\"home\"), \"Home page\") #> <a href=\"./#!/home\">Home page<\/a>"},{"path":"https://gorcha.github.io/shinypages/reference/router_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a router page — router_page","title":"Create a router page — router_page","text":"Create router page","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a router page — router_page","text":"","code":"router_page(   path,   ui_module,   server_module = NULL,   title = \"\",   authorised = NULL,   metadata = list() )"},{"path":"https://gorcha.github.io/shinypages/reference/router_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a router page — router_page","text":"path Path page. ui_module Shiny UI module render. server_module Shiny server module render. title Page title. authorised function determines whether current session authorised view page. function take session object input, return TRUE session authorised view page FALSE otherwise. metadata arbitrary list page metadata. can accessed reactive via get_router_page() used router callbacks.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a router page — router_page","text":"router_page object.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a router page — router_page","text":"","code":"if (interactive()) {  ui_test <- function(id) {   htmltools::p(\"Test!\") }  server_test <- function(id) {   moduleServer(id, function(input, output, session) { }) }  home_page <- router_page(\"home\", ui_test) server_page <- router_page(\"server\", ui_test, server_test)  is_admin <- function(session) {   \"admin\" %in% session$groups }  admin_page <- router_page(\"admin\", ui_test, authorised = is_admin) }"},{"path":"https://gorcha.github.io/shinypages/reference/router_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Router server function — router_server","title":"Router server function — router_server","text":"Register server code. placed shiny server, corresponding router_ui() element.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Router server function — router_server","text":"","code":"router_server(router, input, output, session, id = \"__router__\")"},{"path":"https://gorcha.github.io/shinypages/reference/router_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Router server function — router_server","text":"router router object. input Shiny server input object. output Shiny server output object. session Shiny server session object. id Router id.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Router server function — router_server","text":"shiny observer reference class object. See shiny::observe() details.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Router server function — router_server","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui_test <- function(id) {   htmltools::div(     htmltools::p(\"Test!\"),     htmltools::p(htmltools::a(href = router_link(\"/\"), \"Home\"))   ) }  test_router <- router(router_page(\"home\", ui_test))  ui <- shiny::fluidPage(   router_ui() )  server <- function(input, output, session) {   router_server(test_router, input, output, session) }  shinyApp(ui, server) }"},{"path":"https://gorcha.github.io/shinypages/reference/router_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Router UI output — router_ui","title":"Router UI output — router_ui","text":"Placeholder used render router page. can placed anywhere within shiny UI.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Router UI output — router_ui","text":"","code":"router_ui(id = \"__router__\")"},{"path":"https://gorcha.github.io/shinypages/reference/router_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Router UI output — router_ui","text":"id Router id.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/router_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Router UI output — router_ui","text":"HTML output element.","code":""},{"path":"https://gorcha.github.io/shinypages/reference/shinypages-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shinypages: Multi-page Shiny Applications — shinypages-package","title":"shinypages: Multi-page Shiny Applications — shinypages-package","text":"simple multi-page router Shiny applications, using Shiny modules selectively render content based URL.","code":""},{"path":[]},{"path":"https://gorcha.github.io/shinypages/reference/shinypages-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shinypages: Multi-page Shiny Applications — shinypages-package","text":"Maintainer: Danny Smith danny@gorcha.org","code":""},{"path":"https://gorcha.github.io/shinypages/news/index.html","id":"shinypages-010","dir":"Changelog","previous_headings":"","what":"shinypages 0.1.0","title":"shinypages 0.1.0","text":"Initial release.","code":""}]
