[{"path":"https://gorcha.github.io/shinypages/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 shinypages authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danny Smith. Author, maintainer.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2022). shinypages: Multi-page Shiny Applications. https://github.com/gorcha/shinypages, https://gorcha.github.io/shinypages/.","code":"@Manual{,   title = {shinypages: Multi-page Shiny Applications},   author = {Danny Smith},   year = {2022},   note = {https://github.com/gorcha/shinypages, https://gorcha.github.io/shinypages/}, }"},{"path":"https://gorcha.github.io/shinypages/dev/index.html","id":"shinypages","dir":"","previous_headings":"","what":"Multi-page Shiny Applications","title":"Multi-page Shiny Applications","text":"shinypages simple multi-page router Shiny applications, much inspired Appsilon’s shiny.router.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multi-page Shiny Applications","text":"can install development version shinypages like :","code":"# install.packages(\"devtools\") devtools::install_github(\"gorcha/shinypages\")"},{"path":"https://gorcha.github.io/shinypages/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Multi-page Shiny Applications","text":"","code":"library(shiny) library(shinypages)  # Create a simple page with only UI ui_home <- function(id) {   tagList(     h2(\"Hello world!\"),     p(a(href = router_link(\"cars\"), \"Cars\")),     p(a(href = router_link(\"admin\"), \"Admin\"))   ) }  home_page <- router_page(\"home\", ui_home)   # Create a page with UI and a module server ui_cars <- function(id) {   ns <- NS(id)   tagList(     h2(\"Cars\"),     p(a(href = router_link(\"home\"), \"Home\")),     tableOutput(ns(\"cars\"))   ) }  server_cars <- function(id) {   moduleServer(id, function(input, output, session) {     output$cars <- renderTable(mtcars)   }) }  cars_page <- router_page(\"cars\", ui_cars, server_cars)  # Restrict access to a page is_admin <- function(session) {   \"admin\" %in% session$groups }  ui_admin <- function(id) {   tagList(     h2(\"Top Secret\"),     p(a(href = router_link(\"home\"), \"Home\"))   ) }  admin_page <- router_page(\"admin\", ui_admin, authorised = is_admin)  # Create a router my_router <- router(home_page, cars_page, admin_page)  # Add your router into a Shiny application ui <- fixedPage(   router_ui() )  server <- function(input, output, session) {   router_server(my_router, input, output, session) }  shinyApp(ui, server)"},{"path":"https://gorcha.github.io/shinypages/dev/reference/add_router_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a router callback function — add_router_callback","title":"Set a router callback function — add_router_callback","text":"Set router callback function","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/add_router_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a router callback function — add_router_callback","text":"","code":"add_router_callback(router, callback = c(\"pageload\", \"default\"), func)"},{"path":"https://gorcha.github.io/shinypages/dev/reference/add_router_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a router callback function — add_router_callback","text":"router router object. callback name callback set. Currently \"pageload\" \"default\" callbacks supported. func callback function. function take router_page object shiny session input.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/add_router_callback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a router callback function — add_router_callback","text":"Invisibly returns input router object.","code":""},{"path":[]},{"path":"https://gorcha.github.io/shinypages/dev/reference/add_router_callback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a router callback function — add_router_callback","text":"","code":"if (FALSE) { add_router_callback(   router,   \"pageload\",   function(page, session) {     shinyjs::runjs(paste0(\"document.title = \\\"\", page$title, \"\\\";\"))   } )  add_router_callback(   router,   \"default\",   function(session) {     if (\"dev\" %in% session$groups) {       \"devlanding\"     } else {       \"home\"     }   } ) }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/change_router_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Change router page — change_router_page","title":"Change router page — change_router_page","text":"Set current router page path.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/change_router_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change router page — change_router_page","text":"","code":"change_router_page(   path,   mode = \"push\",   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://gorcha.github.io/shinypages/dev/reference/change_router_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change router page — change_router_page","text":"path Path destination page. mode Argument passed shiny::updateQueryString(). session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/change_router_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change router page — change_router_page","text":"","code":"if (FALSE) { change_router_page(\"home\") }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current page — get_router_page","title":"Get the current page — get_router_page","text":"Get router_page() object current page. Can used access metadata page attributes.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current page — get_router_page","text":"","code":"get_router_page(session = shiny::getDefaultReactiveDomain())"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the current page — get_router_page","text":"session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current page — get_router_page","text":"current router_page() object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the current page — get_router_page","text":"","code":"if (FALSE) { get_router_page() }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the metadata of the current page — get_router_page_metadata","title":"Get the metadata of the current page — get_router_page_metadata","text":"Get list stored metadata attribute current page.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the metadata of the current page — get_router_page_metadata","text":"","code":"get_router_page_metadata(session = shiny::getDefaultReactiveDomain())"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the metadata of the current page — get_router_page_metadata","text":"session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the metadata of the current page — get_router_page_metadata","text":"metadata list current router_page().","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the metadata of the current page — get_router_page_metadata","text":"","code":"if (FALSE) { get_router_page_metadata() }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the title of the current page — get_router_page_title","title":"Get the title of the current page — get_router_page_title","text":"Get title attribute current page.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the title of the current page — get_router_page_title","text":"","code":"get_router_page_title(session = shiny::getDefaultReactiveDomain())"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the title of the current page — get_router_page_title","text":"session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the title of the current page — get_router_page_title","text":"title current router_page().","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_page_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the title of the current page — get_router_page_title","text":"","code":"if (FALSE) { get_router_page_title() }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path of the current page — get_router_path","title":"Get the path of the current page — get_router_path","text":"Extract current router path URL.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path of the current page — get_router_path","text":"","code":"get_router_path(session = shiny::getDefaultReactiveDomain())"},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path of the current page — get_router_path","text":"session current shiny session object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path of the current page — get_router_path","text":"current router path.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/get_router_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the path of the current page — get_router_path","text":"","code":"if (FALSE) { get_router_path() }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a router — router","title":"Create a router — router","text":"router() defines multi-page Shiny application using set router_page()s. See router_server() router_ui() create multi-page application returned router object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a router — router","text":"","code":"router(   ...,   callback_pageload = NULL,   callback_default = NULL,   page_403 = router_page(\"403\", ui_403),   page_404 = router_page(\"404\", ui_404) )  # S3 method for router print(x, short = FALSE, ...)"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a router — router","text":"... set router_page() objects. first page considered default, used path provided. callback_pageload function called immediately page content rendered. function take router_page object shiny session input. callback_default function determines default page. function take shiny session input return path default page. provided, first page used default. page_403 router_page used user attempts access unauthorised page. page_404 router_page used user attempts access page exist. x router object. short one line summary printed?","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a router — router","text":"router object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router.html","id":"callbacks","dir":"Reference","previous_headings":"","what":"Callbacks","title":"Create a router — router","text":"callback function arguments allow user customisation page serving process. callback_pageload called new page loaded. function signature function(page, session), taking router_page shiny session input. Thh return value function ignored. Useful perform operations based page metadata.   callback_default() called determine path serve default page requested. function signature function(session), taking shiny session input returning path page load. Useful setting per-user per-group home pages.","code":"callback_pageload = function(page, session) {   shinyjs::runjs(paste0(\"document.title = \\\"\", page$title, \"\\\";\")) } callback_default = function(session) {   if (\"dev\" %in% session$groups) {     \"devlanding\"   } else {     \"home\"   } }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router.html","id":"http-response-pages","dir":"Reference","previous_headings":"","what":"HTTP response pages","title":"Create a router — router","text":"router_pages served place common HTTP response codes. can customised: page_403 served authorised function page returns FALSE. page_404 served unknown path requested.","code":""},{"path":[]},{"path":"https://gorcha.github.io/shinypages/dev/reference/router.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a router — router","text":"","code":"if (interactive()) {  ui_test <- function(id) {   htmltools::p(\"Test!\") }  home_page <- router_page(\"home\", ui_test) other_page - router_page(\"other\", ui_test)  test_router <- router(home_page, other_page) }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a page link — router_link","title":"Create a page link — router_link","text":"Take path page convert link use Shiny UI.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a page link — router_link","text":"","code":"router_link(path)"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a page link — router_link","text":"path Path destination page.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a page link — router_link","text":"link destination page.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a page link — router_link","text":"","code":"htmltools::a(href = router_link(\"home\"), \"Home page\") #> <a href=\"./#!/home\">Home page<\/a>"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a router page — router_page","title":"Create a router page — router_page","text":"page attaches Shiny module path, included router() definition.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a router page — router_page","text":"","code":"router_page(   path,   ui_module,   server_module = NULL,   title = NULL,   authorised = NULL,   metadata = list() )  # S3 method for router_page print(x, short = FALSE, ...)"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a router page — router_page","text":"path Path page. ui_module Shiny module UI render. server_module Shiny server module render. title Page title. can accessed reactive via get_router_page_title(). authorised function determines whether current session authorised view page. function take shiny session input, return TRUE session authorised view page FALSE otherwise. metadata arbitrary list page metadata. can accessed reactive via get_router_page_metadata() used router callbacks. x router_page object. short one line summary printed? ... Additional arguments specific methods.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a router page — router_page","text":"router_page object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":"shiny-module","dir":"Reference","previous_headings":"","what":"Shiny module","title":"Create a router page — router_page","text":"ui_module server_module arguments take shiny module UI server functions respectively. module functions take arguments apart id.   introduction Shiny modules, see Modularizing Shiny app code article.","code":"ui_test <- function(id) {   htmltools::p(\"Test!\") }  server_test <- function(id) {   shiny::moduleServer(id, function(input, output, session) { }) }  router_page(\"test\", ui_test, server_test)"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":"authorising-sessions","dir":"Reference","previous_headings":"","what":"Authorising sessions","title":"Create a router page — router_page","text":"page can configured check session authorised view serving page. check authorisation, pass function authorised argument takes shiny session input returns TRUE user authorised view page FALSE otherwise. example:   authorised function run router serving page. function returns FALSE, router serve 403 Forbidden page.","code":"is_admin <- function(session) {   \"admin\" %in% session$groups }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":"metadata","dir":"Reference","previous_headings":"","what":"Metadata","title":"Create a router page — router_page","text":"page can two pieces metadata attached: title, can retrieved inside Shiny app get_router_page_title(). metadata, list arbitray data, can retrieved inside Shiny app get_router_page_metadata().","code":""},{"path":[]},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a router page — router_page","text":"","code":"if (interactive()) {  ui_test <- function(id) {   htmltools::p(\"Test!\") }  server_test <- function(id) {   shiny::moduleServer(id, function(input, output, session) { }) }  home_page <- router_page(\"home\", ui_test) server_page <- router_page(\"server\", ui_test, server_test)  is_admin <- function(session) {   \"admin\" %in% session$groups }  admin_page <- router_page(\"admin\", ui_test, authorised = is_admin) }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Router server and UI — router_shiny","title":"Router server and UI — router_shiny","text":"router_server() router_ui() functions used render page modules served [router()] Shiny application. content current page rendered place router_ui(). can appear anywhere inside UI definition, common UI elements like head() tags need repeated page module. router_server() can called anywhere inside server() function Shiny application.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Router server and UI — router_shiny","text":"","code":"router_ui(id = \"__router__\")  router_server(router, input, output, session, id = \"__router__\")"},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Router server and UI — router_shiny","text":"id Router id. router shinypages router() object. input Shiny server input object. output Shiny server output object. session Shiny server session object.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Router server and UI — router_shiny","text":"router_server() returns Shiny observer reference class object. See shiny::observe() details. router_ui() returns HTML output element.","code":""},{"path":[]},{"path":"https://gorcha.github.io/shinypages/dev/reference/router_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Router server and UI — router_shiny","text":"","code":"if (interactive()) {  ui_test <- function(id) {   htmltools::div(     htmltools::p(\"Test!\"),     htmltools::p(htmltools::a(href = router_link(\"/\"), \"Home\"))   ) }  test_router <- router(router_page(\"home\", ui_test))  ui <- shiny::fluidPage(   router_ui() )  server <- function(input, output, session) {   router_server(test_router, input, output, session) }  shiny::shinyApp(ui, server) }"},{"path":"https://gorcha.github.io/shinypages/dev/reference/shinypages-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shinypages: Multi-page Shiny Applications — shinypages-package","title":"shinypages: Multi-page Shiny Applications — shinypages-package","text":"simple multi-page router Shiny applications, using Shiny modules selectively render content based URL.","code":""},{"path":[]},{"path":"https://gorcha.github.io/shinypages/dev/reference/shinypages-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shinypages: Multi-page Shiny Applications — shinypages-package","text":"Maintainer: Danny Smith danny@gorcha.org","code":""},{"path":"https://gorcha.github.io/shinypages/dev/news/index.html","id":"shinypages-development-version","dir":"Changelog","previous_headings":"","what":"shinypages (development version)","title":"shinypages (development version)","text":"Improved documentation. router() router_page() objects gain print() methods. title argument router_page() now defaults NULL instead \"\". New get_router_page_metadata() retrieves metadata list current page.","code":""},{"path":"https://gorcha.github.io/shinypages/dev/news/index.html","id":"shinypages-010","dir":"Changelog","previous_headings":"","what":"shinypages 0.1.0","title":"shinypages 0.1.0","text":"Initial release.","code":""}]
